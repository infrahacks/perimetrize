---
name: Deploy teleport on fly.io
run-name: Deploy teleport on fly.io (online={{inputs.online}})

on:
  workflow_dispatch:
    inputs:
      online:
        required: true
        type: boolean
        default: true
        description: App online?
      region:
        type: choice
        required: true
        default: gru
        description: fly region
        options:
          - gru
jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest
    environment: testing
    env:
      FLY_APP: "${{ secrets.TELEPORT_FLY_APP }}"
      FLY_ORG: "${{ secrets.TELEPORT_FLY_ORG }}"
      FLY_REGION: "${{inputs.region}}"
      FLY_ACCESS_TOKEN: "${{ secrets.FLY_ACCESS_TOKEN }}"
      TELEPORT_EXTERNAL_HOST: "${{ secrets.TELEPORT_EXTERNAL_HOST }}"
      TELEPORT_ACME_EMAIL: "${{ secrets.TELEPORT_ACME_EMAIL}}"
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Export variables
        run: |
          cat <<EOF >> $GITHUB_ENV
          COMMIT_SHORT_HASH=`git rev-parse --short HEAD`
          EOF

      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "/home/runner/.fly/bin" >> $GITHUB_PATH

      - name: Create fly app
        working-directory: apps/teleport
        run: |
          flyctl apps releases --app $FLY_APP || flyctl apps create $FLY_APP

      - name: Create public ip
        working-directory: apps/teleport
        run: |
          flyctl ips list --app $FLY_APP | grep v4 || flyctl allocate-v4 --app $FLY_APP

      - name: Create volume
        working-directory: apps/teleport
        run: |
          VOLUMES=`flyctl volume list --app $FLY_APP -j  | jq 'select(.[].name="teleport") | length'`
          [ $VOLUMES -eq 0 ] && {
            fly volume create teleport --region $FLY_REGION --size 1 --app $FLY_APP
          } || echo "Volume already exists"

      - name: Build
        if: "${{ inputs.online }}"
        working-directory: apps/teleport
        run: |
          envsubst < teleport.yaml | tee teleport.yaml && {
          flyctl deploy --app $FLY_APP --build-only --push --image-label $COMMIT_SHORT_HASH
          }

      - name: Deploy fly machine
        if: "${{ inputs.online }}"
        working-directory: apps/teleport
        run: |
          IMAGE=registry.fly.io/$FLY_APP:$COMMIT_SHORT_HASH
          MACHINES=`flyctl machines list --app $FLY_APP -j | jq 'select(.[].name="teleport") | length' 2>/dev/null || echo 0`
          [ $MACHINES -eq 0 ] && {
            flyctl machines run $IMAGE \
              --name teleport \
              --app $FLY_APP \
              --region $FLY_REGION \
              --org $FLY_ORG \
              --port 443:443 \
              --volume teleport:/var/lib/teleport
            } || {
              echo "Machine already exists. Updating"
              MACHINE_ID=`flyctl m list -j  | jq -r '.[] | select(.name="teleport") | .id'`
              flyctl machine update $MACHINE_ID --image $IMAGE --yes
              flyctl machine start --app $FLY_APP $MACHINE_ID
            }

      - name: Remove fly machine
        if: "${{ inputs.online == false }}"
        working-directory: apps/teleport
        run: |
          MACHINE_ID=`flyctl m list --app $FLY_APP -j | jq -r '.[] | select(.name="teleport") | .id'`
          flyctl machine remove --force --app $FLY_APP $MACHINE_ID
